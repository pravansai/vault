# define the provider
# provider "aws" {
#     access_key = "AKIAUWCCGINJEYAEZU5Q"
#     secret_key = "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"
#     region = "us-east-1"
# }
# resource "aws_vpc" "R-jio" {
#   cidr_block       = "10.1.0.0/16"
#   instance_tenancy = "default"
#   enable_dns_hostnames = "true"
#   tags = {
#     Name = "R-jio"
#   }
# }
# resource "aws_subnet" "Rsubnet" {
#     vpc_id = aws_vpc.R-jio.id
#     depends_on = [aws_vpc.R-jio]
#     count = "${length(var.subnet_cidrs_public)}"
#     cidr_block = "${var.subnet_cidrs_public[count.index]}"
#     availability_zone = "${var.availability_zones[count.index]}"
#     map_public_ip_on_launch = true
#     tags = {
#       Name = "Rsubnet ${count.index + 1}"
#   }
# }

# resource "aws_subnet" "Rsubnet1" {
#     vpc_id = aws_vpc.R-jio.id
#     depends_on = [aws_vpc.R-jio]
#     cidr_block = "10.1.1.0/24"
#     availability_zone = "us-east-1a"
#     map_public_ip_on_launch = true
#     tags = {
#       "Name" = "Rsubnet1"
#     }
# }
# resource "aws_subnet" "Rsubnet2" {
#     vpc_id = aws_vpc.R-jio.id
#     depends_on = [aws_vpc.R-jio]
#     cidr_block = "10.1.2.0/24"
#     availability_zone = "us-east-1b"
#     map_public_ip_on_launch = true
#     tags = {
#       "Name" = "Rsubnet2"
#     }
# }
# resource "aws_subnet" "Rsubnet3" {
#     vpc_id = aws_vpc.R-jio.id
#     depends_on = [aws_vpc.R-jio]
#     cidr_block = "10.1.3.0/24"
#     availability_zone = "us-east-1c"
#     map_public_ip_on_launch = true
#     tags = {
#       "Name" = "Rsubnet3"
#     }
# }
# create igw
# resource "aws_internet_gateway" "my_ig" {
#   tags = {
#     Name = "my_igw"
#   }
#   vpc_id     = aws_vpc.R-jio.id
#   depends_on = [aws_vpc.R-jio]
# }
# create route
# resource "aws_route_table" "Rjio_route_table" {
#   tags = {
#     Name = "Rjio_route_table"
#   }
#   vpc_id = aws_vpc.R-jio.id
# }
# Associate subnet with routetable
# resource "aws_route_table_association" "route_association" {
#   count = "${length(var.subnet_cidrs_public)}"
#   subnet_id      = "${element(aws_subnet.Rsubnet.*.id, count.index)}"
#   route_table_id = aws_route_table.Rjio_route_table.id
# }
# internet gateway to routetable
# resource "aws_route" "default_route" {
#   route_table_id         = aws_route_table.Rjio_route_table.id
#   destination_cidr_block = "0.0.0.0/0"
#   gateway_id             = aws_internet_gateway.my_ig.id
# }
# resource "aws_security_group" "allow_tls" {
#   name        = "allow_tls"
#   description = "Allow TLS inbound traffic"
#   vpc_id      = aws_vpc.R-jio.id

#   ingress {
#     description      = "TLS from VPC"
#     from_port        = 0
#     to_port          = 0
#     protocol         = "-1"
#     cidr_blocks      = [aws_vpc.R-jio.cidr_block]
#   }

#   egress {
#     from_port        = 0
#     to_port          = 0
#     protocol         = "-1"
#     cidr_blocks      = ["0.0.0.0/0"]
#   }

#   tags = {
#     Name = "allow_tls"
#   }
# }
# generate key
# resource "tls_private_key" "web-key" {
#   algorithm = "RSA"
#   rsa_bits = 4096
# }
# save public key to attributes from the generated key
# resource "aws_key_pair" "TF_key" {
#   key_name   = "TF_key"
#   public_key = tls_private_key.web-key.public_key_openssh
# }
# save private key to local system
# resource "local_file" "TF_key" {
#   content  = "tls_private_key.web-key.private_key_pem"
#   filename = "tfkey"
# }
# create an instance
# resource "aws_instance" "web" {
#   ami           = "${lookup(var.ami_ids, "us-east-1")}"
#   instance_type = "t2.micro"
#   tags = {
#     Name = "Webserver ${count.index+1}"
#   }
#   count           = 1
#   key_name        = "sai"
#   subnet_id       = "${element(aws_subnet.Rsubnet.*.id, count.index % length(aws_subnet.Rsubnet.*.id))}"
#   security_groups = [aws_security_group.allow_tls.id]
# }

