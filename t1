# #define the provider
# provider "aws" {
#   region = "us-east-1"
# }
# resource "aws_vpc" "web_vpc" {
#   cidr_block       = "10.0.0.0/24"
#   instance_tenancy = "default"
#   tags = {
#     Name = "web_vpc"
#   }
# }
# resource "aws_subnet" "mysubnet" {
#   vpc_id                  = aws_vpc.web_vpc.id
#   cidr_block              = "10.0.1.0/25"
#   map_public_ip_on_launch = true
#   depends_on              = [aws_vpc.web_vpc]
#   tags = {
#     Name = "Main"
#   }
# }
# resource "aws_route_table" "my_route_table" {
#   tags = {
#     Name = "My_route_table"
#   }
#   vpc_id = aws_vpc.web_vpc.id
# }
# # Associate subnet with routetable
# resource "aws_route_table_association" "route_association" {
#   subnet_id      = aws_subnet.mysubnet.id
#   route_table_id = aws_route_table.my_route_table.id
# }
# #create igw
# resource "aws_internet_gateway" "my_ig" {
#   tags = {
#     Name = "my_igw"
#   }
#   vpc_id     = aws_vpc.web_vpc.id
#   depends_on = [aws_vpc.web_vpc]
# }

# #internet gateway to routetable
# resource "aws_route" "default_route" {
#   route_table_id         = aws_route_table.my_route_table.id
#   destination_cidr_block = "0.0.0.0/0"
#   gateway_id             = aws_internet_gateway.my_ig.id
# }
# #create sg
# resource "aws_security_group" "app_sg" {
#   name        = "App_sg"
#   description = "Allow web inbound traffic"
#   vpc_id      = aws_vpc.web_vpc.id
#   ingress {
#     from_port   = 80
#     to_port     = 80
#     protocol    = "tcp"
#     cidr_blocks = ["0.0.0.0/0"] #officerange
#   }
#   ingress {
#     from_port   = 22
#     to_port     = 22
#     protocol    = "tcp"
#     cidr_blocks = ["0.0.0.0/0"] #officerange
#   }
#   egress {
#     from_port   = 0
#     to_port     = 0
#     protocol    = "-1"
#     cidr_blocks = ["0.0.0.0/0"] #officerange
#   }
# }
# #generate key
# resource "tls_private_key" "web-key" {
#   algorithm = "RSA"
# }
# #save public key to attributes from the generated key
# resource "aws_key_pair" "App-instance-key" {
#   key_name   = "web-key"
#   public_key = tls_private_key.web-key.public_key_openssh
# }
# #save private key to local system
# resource "local_file" "web_key" {
#   content  = "tls_private_key.web-key.private_key_pem"
#   filename = "web-key.pem"
# }
# #create an instance
# resource "aws_instance" "web" {
#   ami           = "ami-0b0dcb5067f052a63"
#   instance_type = "t2.micro"
#   tags = {
#     Name = "Web"
#   }
#   count           = 1
#   key_name        = "web-key"
#   subnet_id       = aws_subnet.mysubnet.id
#   security_groups = [aws_security_group.app_sg.id]

#   provisioner "remote-exec" {
#     inline = [
#       "sudo yum install httpd php git -y",
#       "sudo systemctl start httpd",
#       "sudo systemctl enable httpd",
#     ]
#   }
#   connection {
#     type        = "ssh"
#     user        = "ec2-user"
#     private_key = tls_private_key.web-key.private_key_pem
#     host        = aws_instance.web[0].public_ip
#   }
# }
# #create a volume for data persistence
# resource "aws_ebs_volume" "myebs1" {
#   availability_zone = aws_instance.web[0].availability_zone #
#   size              = 1
#   tags = {
#     "Name" = "ebsvol"
#   }
# }
# # attach volume to my instance
# resource "aws_volume_attachment" "attach_ebs" {
#   depends_on   = [aws_ebs_volume.myebs1]
#   device_name  = "/dev/sdh"
#   volume_id    = aws_ebs_volume.myebs1.id #
#   instance_id  = aws_instance.web[0].id   #
#   force_detach = true
# }
# #mount the volume to your instance
# resource "null_resource" "nullmount" {
#   depends_on = [aws_volume_attachment.attach_ebs]
#   connection {
#     type        = "ssh"
#     user        = "ec2-user"
#     host        = aws_instance.web[0].public_ip           #
#     private_key = tls_private_key.web-key.private_key_pem #
#   }
#   provisioner "remote-exec" {
#     inline = [
#       "sudo mkfs ext4 /dev/xvdh",
#       "sudo mount /dev/xvdh /var/www/html",
#       "sudo rm -rf /var/www/html/*",
#       "sudo git clone https://github.com/vineets300/Webpage1.git"
#     ]
#   }
# }
# #define s3 ID
# locals {
#   s3_origin_id = "s3-origin"
# }
# #create bucket to upload static data like images
# resource "aws_s3_bucket" "daemonbucket12345" {
#   bucket = "daemonbucket12345"

#   tags = {
#     Name        = "daemonbucket12345"
#     Environment = "Prod"
#   }
#   provisioner "local-exec" {
#     command = "https://github.com/vineets300/Webpage1.git web-server-image"
#   }
# }
#   resource "aws_s3_bucket_acl" "acl" {
#   bucket = aws_s3_bucket.daemonbucket12345.id
#   acl    = "public-read-write"
# }
# resource "aws_s3_bucket_versioning" "versioning" {
#     bucket = aws_s3_bucket.daemonbucket12345.id
#     versioning_configuration {
#     status = "Enabled"
#   }
# }
# #allow public access to the bucket
# resource "aws_s3_bucket_public_access_block" "public_storage" {
#   depends_on          = [aws_s3_bucket.daemonbucket12345]
#   bucket              = "daemonbucket12345"
#   block_public_acls   = false
#   block_public_policy = false
# }
# # upload your data to s3 bucket
# resource "aws_s3_bucket_object" "object1" {
#   depends_on = [aws_s3_bucket.daemonbucket12345]
#   bucket     = "daemonbucket12345"
#   acl        = "public-read-write"
#   key        = "Demo1.PNG"
#   source     = "web-server-image/Demo1.PNG"
# }
# #create a cloudfront distribution for CDN
# resource "aws_cloudfront_distribution" "tera-cloudfront1" {
#   depends_on = [aws_s3_bucket_object.object1]
#   origin {
#     domain_name = aws_s3_bucket.daemonbucket12345.bucket_regional_domain_name
#     origin_id   = local.s3_origin_id
#   }
#   enabled = true
#   default_cache_behavior {
#     allowed_methods  = ["DELETE", "GET", "HEAD", "OPTIONS", "PATCH", "POST"]
#     cached_methods   = ["GET", "HEAD"]
#     target_origin_id = local.s3_origin_id

#     forwarded_values {
#       query_string = false

#       cookies {
#         forward = "none"
#       }
#     }
#     viewer_protocol_policy = "allow-all"
#     min_ttl                = 0
#     default_ttl            = 3600
#     max_ttl                = 86400
#   }
#   restrictions {
#     geo_restriction {
#       restriction_type = "none"
#     }
#   }
#   viewer_certificate {
#     cloudfront_default_certificate = true
#   }
# }
# #update the cdn image url to your webserver code
# resource "null_resource" "write_image" {
#   depends_on = [aws_cloudfront_distribution.tera-cloudfront1]
#   connection {
#     type        = "ssh"
#     user        = "ec2-user"
#     host        = aws_instance.web[0].public_ip
#     private_key = tls_private_key.web-key.private_key_pem
#   }

#   provisioner "remote-exec" {
#     inline = [
#       "sudo su << EOF",
#       "echo \"<img src='http://${aws_cloudfront_distribution.tera-cloudfront1.domain_name}/${aws_s3_bucket_object_object1.key}' width = '300' height = '380'>\" >>/var/www/html/index.html",
#       "echo \"</body>\" >>/var/www/html/index.html",
#       "echo \"</html>\" >>/var/www/html/index.html",
#       "EOF",

#     ]
#   }
# }
# # success message and storing the result in a file
# resource "null_resource" "result" {
#   depends_on = [null_resource.nullmount]
#   provisioner "local-exec" {
#     command = "echo the website has been deployed successfully and >> result.txt && echo the IP of the website is ${aws_instance.web[0].public_ip} >>result.txt"
#   }
# }
# # test the application
# resource "null_resource" "running_the_website" {
#   depends_on = [null_resource.write_image]
#   provisioner "local-exec" {
#     command = "start chrome ${aws_instance.web[0].public_ip}"
#   }
# }
